<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:soap="http://cxf.apache.org/bindings/soap"
	xmlns:jaxrs="http://cxf.apache.org/jaxrs"
	xsi:schemaLocation="
                 http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                 http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
                 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                 http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
                 http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
                 http://www.springframework.org/schema/data/jpa 
                 http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
                   http://cxf.apache.org/bindings/soap 
              http://cxf.apache.org/schemas/configuration/soap.xsd
              http://cxf.apache.org/jaxws 
              http://cxf.apache.org/schemas/jaxws.xsd
                 http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd 
                 ">

	<!--
		#########################################################
		指定连接池配置
		#########################################################
	-->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="oracle.jdbc.driver.OracleDriver" />
		<property name="jdbcUrl" value="jdbc:oracle:thin:@192.168.74.10:1521:ORCL" />
		<property name="user" value="heima28" />
		<property name="password" value="heima28" />
	</bean>
	<!-- spring整合JPA -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!--
			#########################################################
			指定JPA扫描的实体类所在的包
			#########################################################
		-->
		<property name="packagesToScan" value="com.itgg.bos.domain" />
		<!-- 指定持久层提供者为Hibernate -->
		<property name="persistenceProvider">
			<bean class="org.hibernate.ejb.HibernatePersistence" />
		</property>
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<!-- 自动建表 -->
				<property name="generateDdl" value="true" />
				<property name="database" value="ORACLE" />
				<property name="databasePlatform" value="org.hibernate.dialect.Oracle10gDialect" />
				<property name="showSql" value="true" />
			</bean>
		</property>
		<property name="jpaDialect">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
		</property>
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!--
		#########################################################
		开启IOC注解.
		指定Spring进行扫描的包，如果该包中的类使用了@Component @Controller@Service等注解，会把这些类注册为bean
		！！！！不要扫描DAO ！！！！
		DAO包下的类要使用Spring Data JPA框架进行扫描
		#########################################################
	-->
	<context:component-scan base-package="com.itgg.bos" />

	<!--
		开启事务注解
		JDK代理方式 : 根据目标对象所实现的接口,创建了一个代理对象
		CGLib代理方式 : 创建一个目标对象的子类

		proxy-target-class:true,使用cglib代理
		proxy-target-class:false,使用jdk代理
	-->
	<tx:annotation-driven proxy-target-class="true" transaction-manager="transactionManager" />
	
	<!-- 基于Spring自动代理的方式,为Service层的对象创建代理对象 -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
		<!-- 开启cglib代理 -->
		<property name="proxyTargetClass" value="true"></property>
	</bean>

	<!--
		配置切面 = 切点 + 通知
		切点 : 向那里插入代码
		通知 : 要插入的代码
	-->
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"></property>
	</bean>
	
	
	<!--
		#########################################################
		指定Spring Data JPA要进行扫描的包,该包中的类框架会自动为其创建代理
		#########################################################
	-->
	<jpa:repositories base-package="com.itgg.bos.dao" />

	 <!--注册订单服务 -->
	<!-- <jaxws:server id="orderService" address="/order">
		<jaxws:serviceBeans>
			<ref bean="orderServiceImpl" />
		</jaxws:serviceBeans>
		
		
	</jaxws:server>  -->
	<jaxrs:server address="/orderService">
		<jaxrs:serviceBeans>
			<ref bean="orderServiceImpl"/>
		</jaxrs:serviceBeans>
		
		<jaxrs:inInterceptors>
			<bean class="org.apache.cxf.interceptor.LoggingInInterceptor"></bean>
		</jaxrs:inInterceptors>

		<jaxrs:outInterceptors>
			<bean class="org.apache.cxf.interceptor.LoggingOutInterceptor"></bean>
		</jaxrs:outInterceptors>
	</jaxrs:server>
	
	<!--发布促销任务的WebService -->
	<jaxrs:server address="/promotionService">
		<jaxrs:serviceBeans>
			<ref bean="promotionServiceImpl" />
		</jaxrs:serviceBeans>
		<jaxrs:inInterceptors>
			<bean class="org.apache.cxf.interceptor.LoggingInInterceptor"></bean>
		</jaxrs:inInterceptors>
		<jaxrs:outInterceptors>
			<bean class="org.apache.cxf.interceptor.LoggingOutInterceptor"></bean>
		</jaxrs:outInterceptors>
	</jaxrs:server>
	
	
	<bean id="shiroFilterFactoryBean" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- 注入安全管理器 -->
		<property name="securityManager" ref="securityManager"></property>
		<!-- private String loginUrl;
    private String successUrl;
    private String unauthorizedUrl; -->
    	<property name="loginUrl" value="/login.html"/>
    	<property name="successUrl" value="/index.html"/>
    	<property name="unauthorizedUrl" value="/unauthorized.html"/>
    	
    	<property name="filterChainDefinitions">
    		<value>
    			 /css/* = anon
				/data/* = anon
				/images/* = anon
				/js/** = anon
				/validatecode.jsp* = anon
				/userAction_login.action =anon
				/courierAction_pageQuery.action = perms["courier:list"]
				/hi.html=perms["courier:list"] 
				/service/** = anon
				/upload/* = anon
				
				/** = authc 
				<!-- /** = anon -->
    		</value>
    	</property>
	</bean>
	
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="userRealm"></property>
		
		<!-- 注入缓存管理器 -->
		<property name="cacheManager" ref="cacheManager"></property>
	</bean>
	
	<!-- 注册缓存管理器 -->
	<bean id="cacheManager"
		class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<!-- 指定配置文件的位置 -->
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml"></property>
	</bean>
	
	<!-- #################################quartz的配置############################# -->
	<bean id="workBillJob" class="com.itgg.bos.service.jobs.WorkBillJob"></bean>
	
	<bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 注入目标对象 -->
		<property name="targetObject" ref="workBillJob"></property>

		<!-- 注入目标方法 -->
		<property name="targetMethod" value="sendEmail"></property>
		
	</bean>	
		
	<bean id="emailTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<!-- 指定触发的规则.闹钟在什么时候响起 -->
		<property name="cronExpression">
			<!-- 每隔五秒钟执行一次 -->
			<value>0 0 0 1 1 ? *</value>
		</property>
		
		<!-- 注入任务详情,闹钟响起的时候要做什么事情 -->
		<property name="jobDetail" ref="jobDetail"></property>
		
	</bean>	
	
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="emailTrigger"/>
			</list>
		</property>
	</bean>
	

</beans>